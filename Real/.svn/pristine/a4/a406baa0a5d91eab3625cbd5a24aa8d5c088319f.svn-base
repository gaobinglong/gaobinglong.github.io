/**
 * Created by shuang on 15. 12. 16..
 */

var Utility = cc.Class.extend({});

Utility.isFromLandscape = 0;

Utility.getRandom = function getRandom(min, max) {
    return Math.random() * (max - min) + min;
};

// @return {integer} a random int between min and max
Utility.getRandomInt = function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
};

Utility.getPlusOrMinus = function getPlusOrMinus() {
    return Math.random() > 0.5 ? 1 : -1;
};

Utility.addCommas = function (nStr) {
    nStr += '';
    var x = nStr.split('.');
    var x1 = x[0];
    var x2 = x.length > 1 ? '.' + x[1] : '';
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
        x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }
    return x1 + x2;
};

Utility.setPlusRotation = function (sprite, plus) {
    sprite.setRotation(sprite.getRotation() - plus);
};

Utility.setPlusPositionX = function (sprite, plus) {
    var pos = sprite.getPosition();
    sprite.setPosition(cc.p(pos.x + plus, pos.y));
};

Utility.setPlusPositionY = function (sprite, plus) {
    var pos = sprite.getPosition();
    sprite.setPosition(cc.p(pos.x, pos.y + plus));
};

Utility.convertFromARToNode = function (pos, node) {
    var contentSize = node.getContentSize();
    var anchPos = node.getAnchorPoint();
    var x = pos.x + contentSize.width * anchPos.x;
    var y = pos.y + contentSize.height * anchPos.y;

    return cc.p(x, y);
};

Utility.setDesignSize = function (type) {
    if (MGGame.g.winSize.width != cc.winSize.width ||
        MGGame.g.winSize.height != cc.winSize.height) {
        MGGame.g.winSize.width = cc.winSize.width;
        MGGame.g.winSize.height = cc.winSize.height;
        ///resize all layer
        cc.eventManager.dispatchCustomEvent(MGGame.e.SCREEN_RESIZE, null);
    }
};

Utility.setDesignSizeLandscape = function(){
    if (cc.sys.isMobile) {
        if (window.innerWidth >= window.innerHeight) {
            var dRate = 1334 / 750;
            var winRate = window.innerWidth / window.innerHeight;
            var dWidth = null;
            var dHeight = null;

            if (winRate > dRate) {
                dWidth = 750 * winRate;
                dHeight = 750;
            } else {
                dWidth = 1334;
                dHeight = 1334 / winRate;
            }
        } else {
            dWidth = window.innerWidth;
            dHeight = window.innerHeight;
        }

        cc.view.setDesignResolutionSize(dWidth, dHeight, cc.ResolutionPolicy.SHOW_ALL);
    } else {
        cc.view.setDesignResolutionSize(1334, 750, cc.ResolutionPolicy.SHOW_ALL);
    }
    Utility.setDesignSize();
};

Utility.setDesignSizePortrait = function(){
    if (cc.sys.isMobile) {
        if (window.innerWidth <= window.innerHeight) {
            var dRate = 750 / 1118;
            var winRate = window.innerWidth / window.innerHeight;
            var dWidth = null;
            var dHeight = null;

            if (winRate >= dRate) {
                dWidth = 1118 * winRate;
                dHeight = 1118;
            } else {
                dWidth = 750;
                dHeight = 750 / winRate;
            }
        } else {
            dWidth = window.innerWidth;
            dHeight = window.innerHeight;
        }

        cc.view.setDesignResolutionSize(dWidth, dHeight, cc.ResolutionPolicy.SHOW_ALL);
    } else {
        cc.view.setDesignResolutionSize(750, 1118, cc.ResolutionPolicy.SHOW_ALL);
    }
    //Utility.setDesignSize();
};


Utility.swapToGame = function () {
    var canvas = document.getElementById("Cocos2dGameContainer");
    var orietation_img = document.getElementById("orietation_img");
    orietation_img.style.display = "none";
    canvas.style.display = "block";
};

Utility.swapToRotationImg = function () {
    var canvas = document.getElementById("Cocos2dGameContainer");
    var orietation_img = document.getElementById("orietation_img");
    orietation_img.style.display = "block";
    canvas.style.display = "none";
};


Utility.getParameterByName = function(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
};

Utility.returnTopPage = function() {
    var soundFlagQuery = "&soundflag=" + MGGame.g.userData.getSoundFlag();
    window.location.href = cc.game.config["topPage"]  + soundFlagQuery;
};

Utility.base64_encode = function(str){
    var c1, c2, c3;
    var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var i = 0, len= str.length, string = '';

    while (i < len){
        c1 = str.charCodeAt(i++) & 0xff;
        if (i == len){
            string += base64EncodeChars.charAt(c1 >> 2);
            string += base64EncodeChars.charAt((c1 & 0x3) << 4);
            string += "==";
            break;
        }
        c2 = str.charCodeAt(i++);
        if (i == len){
            string += base64EncodeChars.charAt(c1 >> 2);
            string += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
            string += base64EncodeChars.charAt((c2 & 0xF) << 2);
            string += "=";
            break;
        }
        c3 = str.charCodeAt(i++);
        string += base64EncodeChars.charAt(c1 >> 2);
        string += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
        string += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
        string += base64EncodeChars.charAt(c3 & 0x3F)
    }
    return string
}